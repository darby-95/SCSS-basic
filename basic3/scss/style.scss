//_var.scss 파일과 _var2.scss 파일에 동일한 이름의 변수를 넣었을때 
// @import "./partials/var";
// @import "./partials/var2"; 

// 변수의 이름이 겹칠때 아래쪽의 파일이 힘이 더 쎄기 때문에 아래쪽의 파일의 변수로 적용된다.
// 이러한 에러 발생을 알려주지 않는 문제를 해결하기위해 💛💛 @use와 @forward 방식이 생겨났다. 
// ✍ @use가 주로 사용되는 방식이며, @forward 는 규모가 있는 프로젝트에서 사용한다.

// 🌟 @use 사용하기
// @use 사용하면 같은 변수(color-primary)가 있을때 ❗❗❗에러가 발생❗❗❗된다.
// @use "./partials/var";
// @use "./partials/var2";

// 🌟 @use 사용 방법
// @use "./partials/var";
// @use "./partials/var2";

// h1{color:var.$color-primary;} : 변수 앞에 파일 명을 붙여주면 그 파일에 있는 변수를 사용한다.
// h1{color:var2.$color-primary;} : 똑같이 사용하면 똑같은 명령어가 밑에 붙는다.

// 🌟 @use 별명 달기
// @use "./partials/var" as v1;
// @use "./partials/var2" as v2;

// h1{color:v1.$color-primary;}
// h1{color: v2.$color-primary;}


// 🌟🌟 @forward 사용하기 [1]
// : 여러 파일을 받아서 다시 전달해주는 역할을 한다.
// @use "./partials/index";
// : index 파일안에 forward를 이용한 var 파일, var2 파일을 연결했기 때문에
// 여기에는 use 를 사용하여 index만 불러도 모든 파일이 연결된다.
// ❗❗ 같은 변수가 있을때 에러가 발생한다.
// h1{color:index.$color-primary;}
// h1{color:index.$color-main;}

// 🌟 경로에서 파일명을 생략하고 큰 폴더만을 불러왔을때 자동으로 변수를 검색하여 찾아준다.
// @use "./partials/" as king;
// @use "./partials/" as queen;

// h1{color:king.$color-main} : var, var2 파일을 모두 뒤져서 그에 맞는 변수를 찾아낸다.
// h1{color:queen.$color-main} : var, var2 파일을 모두 뒤져서 그에 맞는 변수를 찾아낸다.
// h1{color:king.$color-primary} : var와 var2 파일 모두에게 있는 똑같은 변수는 오류가 난다.

// 🌟 *을 사용하면 변수명만 적고, 파일명을 생략💛💛할 수 있다.
@use "./partials/" as *;
h1{color:$color-main}
h1{color:$color-primary}